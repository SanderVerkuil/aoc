<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class AppContainerCache extends Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->methodMap = [
            'kernel' => 'getKernelService',
        ];

        $this->aliases = [];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return [
            'Sander\\AdventOfCode\\CeresSearch\\CeresSearchCommand' => true,
            'Sander\\AdventOfCode\\CeresSearch\\MasWordSearchBoard' => true,
            'Sander\\AdventOfCode\\CeresSearch\\WordSearchBoard' => true,
            'Sander\\AdventOfCode\\GuardGallivant\\Cell' => true,
            'Sander\\AdventOfCode\\GuardGallivant\\Guard' => true,
            'Sander\\AdventOfCode\\GuardGallivant\\GuardGallivantCommand' => true,
            'Sander\\AdventOfCode\\GuardGallivant\\Map' => true,
            'Sander\\AdventOfCode\\HistorianHysteria\\HistorianHysteriaCommand' => true,
            'Sander\\AdventOfCode\\Kernel' => true,
            'Sander\\AdventOfCode\\Logger' => true,
            'Sander\\AdventOfCode\\MullItOver\\Mul' => true,
            'Sander\\AdventOfCode\\MullItOver\\MullItOverCommand' => true,
            'Sander\\AdventOfCode\\PrintQueue\\PrintQueueCommand' => true,
            'Sander\\AdventOfCode\\RedNosedReports\\RedNosedReportsCommand' => true,
            'Symfony\\Component\\DependencyInjection\\ParameterBag\\ParameterBagInterface' => true,
        ];
    }

    /**
     * Gets the public 'kernel' shared service.
     *
     * @return \Sander\AdventOfCode\Kernel
     */
    protected static function getKernelService($container)
    {
        return $container->services['kernel'] = new \Sander\AdventOfCode\Kernel(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Sander\\AdventOfCode\\CeresSearch\\CeresSearchCommand'] ??= new \Sander\AdventOfCode\CeresSearch\CeresSearchCommand());
            yield 1 => ($container->privates['Sander\\AdventOfCode\\GuardGallivant\\GuardGallivantCommand'] ??= new \Sander\AdventOfCode\GuardGallivant\GuardGallivantCommand());
            yield 2 => ($container->privates['Sander\\AdventOfCode\\HistorianHysteria\\HistorianHysteriaCommand'] ??= new \Sander\AdventOfCode\HistorianHysteria\HistorianHysteriaCommand());
            yield 3 => ($container->privates['Sander\\AdventOfCode\\MullItOver\\MullItOverCommand'] ??= new \Sander\AdventOfCode\MullItOver\MullItOverCommand());
            yield 4 => ($container->privates['Sander\\AdventOfCode\\PrintQueue\\PrintQueueCommand'] ??= new \Sander\AdventOfCode\PrintQueue\PrintQueueCommand());
            yield 5 => ($container->privates['Sander\\AdventOfCode\\RedNosedReports\\RedNosedReportsCommand'] ??= new \Sander\AdventOfCode\RedNosedReports\RedNosedReportsCommand());
        }, 6), 'Advent of Code 2024', 'Day 06', 'dev', '1');
    }

    public function getParameter(string $name): array|bool|string|int|float|\UnitEnum|null
    {
        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new ParameterNotFoundException($name);
        }

        if (isset($this->loadedDynamicParameters[$name])) {
            $value = $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        } else {
            $value = $this->parameters[$name];
        }

        return $value;
    }

    public function hasParameter(string $name): bool
    {
        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (!isset($this->parameterBag)) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            $this->parameterBag = new FrozenParameterBag($parameters, []);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        throw new ParameterNotFoundException($name);
    }

    protected function getDefaultParameters(): array
    {
        return [
            'app.name' => 'Advent of Code 2024',
            'app.version' => 'Day 06',
        ];
    }
}
